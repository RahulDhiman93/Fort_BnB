{{define "base"}}
<!doctype html>
<html lang="en">
<head>
    <!-- Required meta tags -->
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">

    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-1BmE4kWBq78iYhFldvKuhfTAU6auU8tT94WrHftjDbrCEXSU1oBoqyl2QvZ6jIW3" crossorigin="anonymous">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/vanillajs-datepicker@1.3.4/dist/css/datepicker-bs5.min.css">
    <link rel="stylesheet" type="text/css" href="https://unpkg.com/notie/dist/notie.min.css">
    <link rel="stylesheet" type="text/css" href="/static/css/styles.css">

    <title>Hello, world!</title>

</head>
<body>

<nav class="navbar navbar-expand-lg navbar-dark bg-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="#">Navbar</a>
        <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse navbar-collapse" id="navbarSupportedContent">
            <ul class="navbar-nav me-auto mb-2 mb-lg-0">
                <li class="nav-item">
                    <a class="nav-link active" aria-current="page" href="/">Home</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="/about">About</a>
                </li>
                <li class="nav-item dropdown">
                    <a class="nav-link dropdown-toggle" href="#" id="navbarDropdown" role="button" data-bs-toggle="dropdown" aria-expanded="false">
                        Rooms
                    </a>
                    <ul class="dropdown-menu" aria-labelledby="navbarDropdown">
                        <li><a class="dropdown-item" href="/generals-quarters">General's Quarters</a></li>
                        <li><a class="dropdown-item" href="/majors-suite">Major's Suite</a></li>
                    </ul>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="/search-availability">Book Now</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="/contact">Contact Us</a>
                </li>
            </ul>
        </div>
    </div>
</nav>

{{block "content" .}}

{{end}}

<div class="row my-footer">
    <div class="col">
        Left
    </div>

    <div class="col">
        Middle
    </div>

    <div class="col">
        Right
    </div>
</div>


<script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.10.2/dist/umd/popper.min.js" integrity="sha384-7+zCNj/IqJ95wo16oMtfsKbZ9ccEh31eOz1HGyDuCQ6wgnyJNSYdrPa03rtR1zdB" crossorigin="anonymous"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.min.js" integrity="sha384-QJHtvGhmr9XOIpI6YVutG+2QOK9T+ZnN4kzFN1RtK3zEFEIsxhlmWl5/YESvpZ13" crossorigin="anonymous"></script>
<script src="https://cdn.jsdelivr.net/npm/vanillajs-datepicker@1.3.4/dist/js/datepicker-full.min.js"></script>
<script src="https://unpkg.com/notie"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

{{block "js" .}}

{{end}}

<script>

    let attention = prompt();

    // Example starter JavaScript for disabling form submissions if there are invalid fields
    (function () {
        'use strict'

        // Fetch all the forms we want to apply custom Bootstrap validation styles to
        const forms = document.querySelectorAll('.needs-validation');

        // Loop over them and prevent submission
        Array.prototype.slice.call(forms)
            .forEach(function (form) {
                form.addEventListener('submit', function (event) {
                    if (!form.checkValidity()) {
                        event.preventDefault()
                        event.stopPropagation()
                    }

                    form.classList.add('was-validated')
                }, false)
            })
    })()


    function notify(msg, type) {
        notie.alert({
            type: type, // optional, default = 4, enum: [1, 2, 3, 4, 5, 'success', 'warning', 'error', 'info', 'neutral']
            text: msg,
            stay: false, // optional, default = false
            time: 3, // optional, default = 3, minimum = 1,
            position: 'top' // optional, default = 'top', enum: ['top', 'bottom']
        })
    }

    function notifyModal(title, text, icon, confirmButtonText) {
        Swal.fire({
            title: title,
            text: text,
            icon: icon,
            confirmButtonText: confirmButtonText
        })
    }

    {{with .Error}}
    notify("{{.}}", "error")
    {{end}}

    {{with .Flash}}
    notify("{{.}}", "success")
    {{end}}

    {{with .Warning}}
    notify("{{.}}", "warning")
    {{end}}

    function prompt() {
        let myToast = function (c) {

            const {
                msg = "",
                icon = "success",
                position = "top-end",
            } = c

            const Toast = Swal.mixin({
                toast: true,
                title: msg,
                position: position,
                icon: icon,
                showConfirmButton: false,
                timer: 3000,
                timerProgressBar: true,
                didOpen: (toast) => {
                    toast.addEventListener('mouseenter', Swal.stopTimer)
                    toast.addEventListener('mouseleave', Swal.resumeTimer)
                }
            })

            Toast.fire({})
        }

        let success = function (c) {

            const {
                msg = "",
                title = "",
                footer = "",
            } = c

            Swal.fire({
                icon: 'success',
                title: title,
                text: msg,
                footer: footer
            })
        }

        let error = function (c) {

            const {
                msg = "",
                title = "",
                footer = "",
            } = c

            Swal.fire({
                icon: 'error',
                title: title,
                text: msg,
                footer: footer
            })
        }

        async function custom(c) {
            const {
                icon = "",
                msg = "",
                title = "",
                showConfirmButton = true,
            } = c

            const { value: result } = await Swal.fire({
                icon: icon,
                title: title,
                html: msg,
                backdrop: false,
                focusConfirm: false,
                showCancelButton: true,
                showConfirmButton: showConfirmButton,
                willOpen: () => {
                  if (c.willOpen() !== undefined) {
                      c.willOpen()
                  }
                },
                didOpen: () => {
                    if (c.didOpen() !== undefined) {
                        c.didOpen()
                    }
                },
                preConfirm: () => {
                    return [
                        document.getElementById('start').value,
                        document.getElementById('end').value
                    ]
                }
            })

            if (result) {
                if (result.dismiss !== Swal.DismissReason.cancel) {
                    if (result.value !== "") {
                        if (c.callback !== undefined) {
                            c.callback(result)
                        }
                    } else {
                        c.callback(false)
                    }
                } else {
                    c.callback(false)
                }
            }

        }

        return {
            myToast : myToast,
            success :  success,
            error : error,
            custom: custom,
        }
    }

</script>

</body>
</html>
{{end}}